#include <behaviors.dtsi>

#define NONE 0

/* includes */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* layers */
#define LAYER_Base 0
#define LAYER_Game 1
#define LAYER_Symbol 2
#define LAYER_Mouse 3
#define LAYER_Num 4
#define LAYER_Magic 5

/* positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Ã©yob */
#define EYOB_DOLLAR GRAVE
#define EYOB_PLUS_N1 N1
#define EYOB_EQUAL_N2 N2
#define EYOB_LBRACE_N3 N3
#define EYOB_LPAR_N4 N4
#define EYOB_MINUS_N5 N5
#define EYOB_DBQUOTE_N6 N6
#define EYOB_RPAR_N7 N7
#define EYOB_RBRACE_N8 N8
#define EYOB_SLASH_N9 N9
#define EYOB_STAR_N0 N0
#define EYOB_AT MINUS
#define EYOB_ampersand EQUAL

#define EYOB_EACUTE Q
#define EYOB_Y W
#define EYOB_O E
#define EYOB_B R
#define EYOB_W T
#define EYOB_F Y
#define EYOB_D U
#define EYOB_L I
#define EYOB_quote O
#define EYOB_V P
#define EYOB_Z LBKT
#define EYOB_circumflex RBKT

#define EYOB_A A
#define EYOB_I S
#define EYOB_E D
#define EYOB_U F
#define EYOB_comma G
#define EYOB_P H
#define EYOB_S J
#define EYOB_T K
#define EYOB_R L
#define EYOB_N SEMI
#define EYOB_X SQT
#define EYOB_ccedilla BSLH

#define EYOB_AGRAVE Z
#define EYOB_J X
#define EYOB_EGRAVE C
#define EYOB_dot V
#define EYOB_K B
#define EYOB_G N
#define EYOB_C M
#define EYOB_M COMMA
#define EYOB_H DOT
#define EYOB_Q FSLH

/* magic */
/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

 /* behaviors */
/ {
    behaviors {
        lthold: layer_tap_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_HOLD";
            bindings = <&mo>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        sktap: sticky_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_TAP";
            bindings = <&kp>, <&sk>;
            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        lsmctrl: left_shift_maintain_ctrl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&kp LC(LSHFT)>;
            mods = <(MOD_LCTL)>;
        };

        lamctrl: left_alt_maintain_ctrl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LALT>, <&kp LC(LALT)>;
            mods = <(MOD_LCTL)>;
        };

        mtla: mod_tap_left_alt_maintain_ctrl {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_LEFT_ALT";
            bindings = <&lamctrl>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };
    };
};

/* bluetooth */
/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };

    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    keymap {
        compatible = "zmk,keymap";

        layer_Base {
            bindings = <
                &kp F1                 &kp F2            &kp F3              &kp F4               &kp F5                                                                                                                                                                                               &kp F6             &kp F7               &kp F8              &kp F9             &kp F10
                &kp EYOB_DOLLAR        &kp EYOB_PLUS_N1  &kp EYOB_EQUAL_N2   &kp EYOB_LBRACE_N3   &kp EYOB_LPAR_N4   &kp EYOB_MINUS_N5                                                                                                                                  &kp EYOB_DBQUOTE_N6   &kp EYOB_RPAR_N7   &kp EYOB_RBRACE_N8   &kp EYOB_SLASH_N9   &kp EYOB_STAR_N0   &kp EYOB_AT
                &kp TAB                &kp EYOB_EACUTE   &kp EYOB_Y          &kp EYOB_O           &kp EYOB_B         &kp EYOB_W                                                                                                                                         &kp EYOB_F            &kp EYOB_D         &kp EYOB_L           &kp EYOB_quote      &kp EYOB_V         &kp EYOB_Z
                &kp ESC                &kp EYOB_A        &kp EYOB_I          &kp EYOB_E           &kp EYOB_U         &kp EYOB_comma                                                                                                                                     &kp EYOB_P            &kp EYOB_S         &kp EYOB_T           &kp EYOB_R          &kp EYOB_N         &kp EYOB_X
                &kp EQUAL              &kp EYOB_AGRAVE   &kp EYOB_J          &kp EYOB_EGRAVE      &kp EYOB_dot       &kp EYOB_K       &kp LSHFT            &lthold LAYER_Symbol LGUI   &mt LGUI DEL                    &mo LAYER_Num         &mt RALT DEL   &kp BSPC    &kp EYOB_G            &kp EYOB_C         &kp EYOB_M           &kp EYOB_H          &kp EYOB_Q         &kp EYOB_circumflex
                &magic LAYER_Magic 0   &kp LEFT          &kp UP              &kp DOWN             &kp RIGHT                           &sktap LCTRL LCTRL   &mt LALT SPACE            &lthold LAYER_Mouse ENTER        &mt RALT RA(SPACE)    &kp RET        &kp SPACE                         &kp HOME           &kp PG_UP            &kp PG_DN           &kp END            &kp EYOB_ccedilla
            >;
        };

        layer_Game {
            bindings = <
                &trans      &trans      &trans   &trans   &trans                                                                                                     &trans   &trans   &trans   &trans   &trans
                &trans      &trans      &trans   &trans   &trans   &trans                                                                                  &trans    &trans   &trans   &trans   &trans   &trans
                &kp ESC     &kp TAB     &kp Q    &kp W    &kp E    &kp R                                                                                   &trans    &trans   &trans   &trans   &trans   &trans
                &kp T       &kp LSHFT   &kp A    &kp S    &kp D    &kp F                                                                                   &trans    &trans   &trans   &trans   &trans   &trans
                &kp RCTRL   &kp LCTRL   &kp Z    &kp X    &kp C    &kp V    &kp G       &kp B      &kp LGUI                     &trans   &trans   &trans   &trans    &trans   &trans   &trans   &trans   &trans
                &trans      &trans      &trans   &trans   &trans            &kp SPACE   &kp LALT   &mo LAYER_Symbol             &trans   &trans   &trans             &trans   &trans   &trans   &trans   &trans
            >;
        };

        layer_Symbol {
            bindings = <
                &kp C_BRI_DN   &kp C_BRI_UP      &kp C_PREV     &kp C_NEXT     &kp C_PP                                                                                                             &kp C_MUTE     &kp C_VOL_DN    &kp C_VOL_UP    &kp F11      &kp F12
                &none          &tog LAYER_Game   &none          &none          &kp PAUSE_BREAK   &kp INS                                                                               &kp CAPS     &kp KP_NUM     &kp SLCK        &none           &none        &none
                &none          &kp MINUS         &kp LS(RBKT)   &kp N2         &kp N5            &none                                                                                 &none        &kp EQUAL      &kp LS(EQUAL)   &kp N9          &kp RA(N9)   &none
                &kp PSCRN      &kp RA(N3)        &kp RA(N4)     &kp N3         &kp N4            &kp LS(G)                                                                             &none        &kp N7         &kp N8          &kp RA(N7)      &kp RA(N8)   &none
                &none          &kp LS(GRAVE)     &kp GRAVE      &kp LS(O)      &kp LS(V)         &none       &trans   &trans   &kp LCTRL         &kp K_APP   &trans         &trans     &none        &kp N6         &kp O           &kp RA(O)       &kp N0       &none
                &trans         &kp LG(LEFT)      &kp LG(UP)     &kp LG(DOWN)   &kp LG(RIGHT)                 &trans   &trans   &trans            &trans      &kp RA(SPACE)  &trans                  &kp LG(HOME)   &kp LG(PG_UP)   &kp LG(PG_DN)   &kp LG(END)  &none
            >;
        };

        layer_Mouse {
            bindings = <
                &trans   &trans           &trans           &trans           &trans                                                                                        &trans   &trans   &trans   &trans   &trans
                &none    &none            &none            &none            &none            &none                                                              &trans    &trans   &trans   &trans   &trans   &trans
                &none    &none            &kp LC(EYOB_Z)   &none            &none            &none                                                              &trans    &trans   &trans   &trans   &trans   &trans
                &none    &kp LC(EYOB_A)   &kp LC(EYOB_S)   &none            &kp LC(EYOB_T)   &none                                                              &trans    &trans   &trans   &trans   &trans   &trans
                &none    &kp LC(EYOB_W)   &kp LC(SQT)      &kp LC(EYOB_C)   &kp LC(EYOB_V)   &none   &trans  &trans  &trans          &trans   &trans   &trans   &trans    &trans   &trans   &trans   &trans   &trans
                &trans   &trans           &trans           &trans           &trans                   &trans  &trans  &trans          &trans   &trans   &trans             &trans   &trans   &trans   &trans   &trans
            >;
        };

        layer_Num {
            bindings = <
                &trans   &trans      &trans         &trans          &trans                                                                                            &trans         &trans            &trans         &trans         &trans
                &none    &none       &none          &none           &none          &none                                                                 &none        &none          &none             &none          &none          &none
                &none    &none       &kp KP_LPAR    &kp KP_SLASH    &kp KP_MINUS   &none                                                                 &none        &kp KP_PLUS    &kp KP_MULTIPLY   &kp KP_RPAR    &none          &none
                &none    &kp KP_N1   &kp KP_N2      &kp KP_N3       &kp KP_N4      &kp KP_N5                                                             &kp KP_N6    &kp KP_N7      &kp KP_N8         &kp KP_N9      &kp KP_N0      &none
                &none    &none       &none          &none           &kp KP_DOT     &none       &trans  &trans  &trans         &trans   &trans   &trans   &none   &kp KP_EQUAL   &none             &none          &none          &none
                &trans   &trans      &trans         &trans          &trans                     &trans  &trans  &trans         &trans   &trans   &trans                &trans         &trans            &trans         &trans         &none
            >;
        };

        layer_Magic {
            bindings = <
                &bt BT_CLR    &none             &none             &none             &none                                                                                                    &none   &none   &none   &none   &bt BT_CLR_ALL
                &none         &none             &none             &none             &none             &none                                                                          &none   &none   &none   &none   &none   &none
                &none         &rgb_ug RGB_SPI   &rgb_ug RGB_SAI   &rgb_ug RGB_HUI   &rgb_ug RGB_BRI   &rgb_ug RGB_TOG                                                                &none   &none   &none   &none   &none   &none
                &bootloader   &rgb_ug RGB_SPD   &rgb_ug RGB_SAD   &rgb_ug RGB_HUD   &rgb_ug RGB_BRD   &rgb_ug RGB_EFF                                                                &none   &none   &none   &none   &none   &bootloader
                &sys_reset    &none             &none             &none             &none             &none             &bt_2   &bt_3   &trans               &none   &none   &none   &none   &none   &none   &none   &none   &sys_reset
                &none         &none             &none             &none             &none                               &bt_0   &bt_1   &out OUT_USB         &none   &none   &none           &none   &none   &none   &none   &none
            >;
        };

    };
};
